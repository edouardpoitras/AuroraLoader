<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="Aurora" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AA/4AAAf+AAAH/4AAH//AAH//8AD///4H/8=
</value>
  </data>
</root>